name: Test Build and Push Docker image

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-cache-${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Run user tests
        run: npm test

  build:
    needs: test  
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Create .env file
        run: |
          echo "VITE_API_URL=${{ secrets.API_URL }}" >> .env
          echo "VITE_ENCRYPTION_KEY=${{ secrets.API_KEY }}" >> .env
  
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
  
      - name: Build Docker image
        run: |
          docker build . -t "${{ secrets.DOCKERHUB_USERNAME }}/front:latest"
  
      - name: Push Docker image 
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/front:latest"

  deploy:
    needs: build  
    runs-on: ubuntu-latest
  
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCLOUD_SSH_KEY }}" > ~/.ssh/gcloud_key
          chmod 600 ~/.ssh/gcloud_key
  
      - name: SSH into VM and deploy container
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/gcloud_key ${{ secrets.GCLOUD_USER }}@${{ secrets.GCLOUD_HOST }} << EOF
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker stop front || true
            sudo docker rm front || true
            sudo docker image prune -f
            sudo docker pull "${{ secrets.DOCKERHUB_USERNAME }}/front:latest"
            sudo docker run -d --network host --name front -p 80:80 "${{ secrets.DOCKERHUB_USERNAME }}/front:latest"
          EOF
