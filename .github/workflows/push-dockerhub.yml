name: Build and Push Docker image

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-cache-${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Run user tests
        run: npm test

  build:
    needs: test  
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build . \
            --build-arg VITE_API_URL=${{ secrets.API_URL }} \
            --build-arg VITE_API_KEY=${{ secrets.API_KEY }} \
            -t "${{ secrets.DOCKERHUB_USERNAME }}"/front:latest
      - name: Push Docker image 
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/front:latest"

  deploy:
    needs: build  
    runs-on: ubuntu-latest
  
    steps:
    
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCLOUD_SSH_KEY }}" > ~/.ssh/gcloud_key
          chmod 600 ~/.ssh/gcloud_key
          
      - name: SSH into VM and deploy container (via user/pass)
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
      
          sshpass -p "${{ secrets.GCLOUD_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GCLOUD_USER }}@${{ secrets.GCLOUD_HOST }} << EOF
            echo "🔍 Logando no Docker..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          
            echo "📦 Fazendo pull da imagem..."
            sudo docker pull "${{ secrets.DOCKERHUB_USERNAME }}"/front:latest
          
            echo "🛑 Parando container antigo..."
            sudo docker stop front || true
            sudo docker rm front || true
          
            echo "🚀 Rodando novo container..."
            sudo docker run -d --name front -p 3000:3000 "${{ secrets.DOCKERHUB_USERNAME }}"/front:latest
          EOF


